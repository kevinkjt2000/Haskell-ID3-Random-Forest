{-# OPTIONS_GHC -F -pgmF htfpp #-}
module ID3 (id3, id3', htf_thisModulesTests) where
import qualified DecisionTree as DT
import Test.Framework
import Data.Function (on)
import qualified Data.List as List
import Data.Maybe (fromJust)

iLength = fromIntegral . length
round n f = (fromInteger $ Prelude.round $ f * (10^n)) / (10.0^^n)
deleteAttr = List.deleteBy (==)
groupDataBy func = List.groupBy ((==) `on` func) . List.sortBy (compare `on` func)

id3' :: (Ord x, Ord y) => [([x],y)] -> [Int] -> (DT.DecisionTree x y)
id3' dataset [] =
    let majority = snd . head . List.maximumBy (compare `on` length)
    in DT.label $ majority $ groupDataBy snd dataset
id3' dataset unusedAttributes =
    let gains = List.zipWith (information_gain) unusedAttributes (repeat dataset)
        bestAttribute = snd $ List.maximumBy (compare `on` fst) (zip gains unusedAttributes)
        selector = (!! bestAttribute) . fst
        partitioned = groupDataBy selector dataset
        leftoverAttrs = deleteAttr bestAttribute unusedAttributes
        splitFunc attr =
            let newdataset = List.filter ((== attr) . (!! bestAttribute) . fst) dataset
            in id3' newdataset leftoverAttrs
        possibleAttrValues = map ((!! bestAttribute) . fst . head) partitioned
    in if 1 == length (groupDataBy snd dataset)
        then DT.label $ snd $ head $ dataset
        else DT.attrIndex bestAttribute $ List.zipWith
                  (\attr subtree -> DT.attrValue attr [subtree])
                  possibleAttrValues
                  (map splitFunc possibleAttrValues)

test_id3_soybean_small = do
    assertEqual expected actual
    where actual = show $ id3 dataset
          expected = "Node {rootLabel = AttrIndex 21, subForest = [Node {rootLabel = AttrValue \"0\", subForest = [Node {rootLabel = Label \"D1\", subForest = []}]},Node {rootLabel = AttrValue \"1\", subForest = [Node {rootLabel = AttrIndex 27, subForest = [Node {rootLabel = AttrValue \"0\", subForest = [Node {rootLabel = Label \"D1\", subForest = []}]},Node {rootLabel = AttrValue \"3\", subForest = [Node {rootLabel = Label \"D3\", subForest = []}]}]}]},Node {rootLabel = AttrValue \"2\", subForest = [Node {rootLabel = Label \"D4\", subForest = []}]},Node {rootLabel = AttrValue \"3\", subForest = [Node {rootLabel = Label \"D2\", subForest = []}]}]}"
          dataset = [(["4","0","2","1","1","1","0","1","0","2","1","1","0","2","2","0","0","0","1","0","3","1","1","1","0","0","0","0","4","0","0","0","0","0","0"],"D1"),(["5","0","2","1","0","3","1","1","1","2","1","1","0","2","2","0","0","0","1","1","3","0","1","1","0","0","0","0","4","0","0","0","0","0","0"],"D1"),(["3","0","2","1","0","2","0","2","1","1","1","1","0","2","2","0","0","0","1","0","3","0","1","1","0","0","0","0","4","0","0","0","0","0","0"],"D1"),(["6","0","2","1","0","1","1","1","0","0","1","1","0","2","2","0","0","0","1","1","3","1","1","1","0","0","0","0","4","0","0","0","0","0","0"],"D1"),(["4","0","2","1","0","3","0","2","0","2","1","1","0","2","2","0","0","0","1","0","3","1","1","1","0","0","0","0","4","0","0","0","0","0","0"],"D1"),(["5","0","2","1","0","2","0","1","1","0","1","1","0","2","2","0","0","0","1","1","3","1","1","1","0","0","0","0","4","0","0","0","0","0","0"],"D1"),(["3","0","2","1","0","2","1","1","0","1","1","1","0","2","2","0","0","0","1","1","3","0","1","1","0","0","0","0","4","0","0","0","0","0","0"],"D1"),(["3","0","2","1","0","1","0","2","1","2","1","1","0","2","2","0","0","0","1","0","3","0","1","1","0","0","0","0","4","0","0","0","0","0","0"],"D1"),(["6","0","2","1","0","3","0","1","1","1","1","1","0","2","2","0","0","0","1","0","3","1","1","1","0","0","0","0","4","0","0","0","0","0","0"],"D1"),(["6","0","2","1","0","1","0","1","0","2","1","1","0","2","2","0","0","0","1","0","3","1","1","1","0","0","0","0","4","0","0","0","0","0","0"],"D1"),(["6","0","0","2","1","0","2","1","0","0","1","1","0","2","2","0","0","0","1","1","0","3","0","0","0","2","1","0","4","0","0","0","0","0","0"],"D2"),(["4","0","0","1","0","2","3","1","1","1","1","1","0","2","2","0","0","0","1","0","0","3","0","0","0","2","1","0","4","0","0","0","0","0","0"],"D2"),(["5","0","0","2","0","3","2","1","0","2","1","1","0","2","2","0","0","0","1","0","0","3","0","0","0","2","1","0","4","0","0","0","0","0","0"],"D2"),(["6","0","0","1","1","3","3","1","1","0","1","1","0","2","2","0","0","0","1","0","0","3","0","0","0","2","1","0","4","0","0","0","0","0","0"],"D2"),(["3","0","0","2","1","0","2","1","0","1","1","1","0","2","2","0","0","0","1","0","0","3","0","0","0","2","1","0","4","0","0","0","0","0","0"],"D2"),(["4","0","0","1","1","1","3","1","1","1","1","1","0","2","2","0","0","0","1","1","0","3","0","0","0","2","1","0","4","0","0","0","0","0","0"],"D2"),(["3","0","0","1","0","1","2","1","0","0","1","1","0","2","2","0","0","0","1","0","0","3","0","0","0","2","1","0","4","0","0","0","0","0","0"],"D2"),(["5","0","0","2","1","2","2","1","0","2","1","1","0","2","2","0","0","0","1","1","0","3","0","0","0","2","1","0","4","0","0","0","0","0","0"],"D2"),(["6","0","0","2","0","1","3","1","1","0","1","1","0","2","2","0","0","0","1","0","0","3","0","0","0","2","1","0","4","0","0","0","0","0","0"],"D2"),(["5","0","0","2","1","3","3","1","1","2","1","1","0","2","2","0","0","0","1","0","0","3","0","0","0","2","1","0","4","0","0","0","0","0","0"],"D2"),(["0","1","2","0","0","1","1","1","1","1","1","0","0","2","2","0","0","0","1","0","1","1","0","1","1","0","0","3","4","0","0","0","0","0","0"],"D3"),(["2","1","2","0","0","3","1","2","0","1","1","0","0","2","2","0","0","0","1","0","1","1","0","1","0","0","0","3","4","0","0","0","0","0","0"],"D3"),(["2","1","2","0","0","2","1","1","0","2","1","0","0","2","2","0","0","0","1","0","1","1","0","1","1","0","0","3","4","0","0","0","0","0","0"],"D3"),(["0","1","2","0","0","0","1","1","1","2","1","0","0","2","2","0","0","0","1","0","1","1","0","1","0","0","0","3","4","0","0","0","0","0","0"],"D3"),(["0","1","2","0","0","2","1","1","1","1","1","0","0","2","2","0","0","0","1","0","1","1","0","1","0","0","0","3","4","0","0","0","0","0","0"],"D3"),(["4","0","2","0","1","0","1","2","0","2","1","1","0","2","2","0","0","0","1","1","1","1","0","1","1","0","0","3","4","0","0","0","0","0","0"],"D3"),(["2","1","2","0","0","3","1","2","0","2","1","0","0","2","2","0","0","0","1","0","1","1","0","1","1","0","0","3","4","0","0","0","0","0","0"],"D3"),(["0","1","2","0","0","0","1","1","0","1","1","0","0","2","2","0","0","0","1","0","1","1","0","1","0","0","0","3","4","0","0","0","0","0","1"],"D3"),(["3","0","2","0","1","3","1","2","0","1","1","0","0","2","2","0","0","0","1","1","1","1","0","1","1","0","0","3","4","0","0","0","0","0","0"],"D3"),(["0","1","2","0","0","1","1","2","1","2","1","0","0","2","2","0","0","0","1","0","1","1","0","1","0","0","0","3","4","0","0","0","0","0","0"],"D3"),(["2","1","2","1","1","3","1","2","1","2","1","1","0","2","2","0","0","0","1","0","2","2","0","1","0","0","0","3","4","0","0","0","0","0","1"],"D4"),(["0","1","1","1","0","1","1","1","0","0","1","1","0","2","2","0","0","0","1","0","1","2","0","0","0","0","0","3","4","0","0","0","0","0","1"],"D4"),(["3","1","2","0","0","1","1","2","1","0","1","1","0","2","2","0","0","0","1","0","2","2","0","0","0","0","0","3","4","0","0","0","0","0","1"],"D4"),(["2","1","2","1","1","1","1","2","0","2","1","1","0","2","2","0","0","0","1","0","1","2","0","1","0","0","0","3","4","0","0","0","0","0","1"],"D4"),(["1","1","2","0","0","3","1","1","1","2","1","1","0","2","2","0","0","0","1","0","2","2","0","0","0","0","0","3","4","0","0","0","0","0","1"],"D4"),(["1","1","2","1","0","0","1","2","1","1","1","1","0","2","2","0","0","0","1","0","2","2","0","0","0","0","0","3","4","0","0","0","0","0","1"],"D4"),(["0","1","2","1","0","3","1","1","0","0","1","1","0","2","2","0","0","0","1","0","1","2","0","0","0","0","0","3","4","0","0","0","0","0","1"],"D4"),(["2","1","2","0","0","1","1","2","0","0","1","1","0","2","2","0","0","0","1","0","1","2","0","0","0","0","0","3","4","0","0","0","0","0","1"],"D4"),(["3","1","2","0","0","2","1","2","1","1","1","1","0","2","2","0","0","0","1","0","2","2","0","0","0","0","0","3","4","0","0","0","0","0","1"],"D4"),(["3","1","1","0","0","2","1","2","1","2","1","1","0","2","2","0","0","0","1","0","2","2","0","0","0","0","0","3","4","0","0","0","0","0","1"],"D4"),(["0","1","2","1","1","1","1","1","0","0","1","1","0","2","2","0","0","0","1","0","1","2","0","1","0","0","0","3","4","0","0","0","0","0","1"],"D4"),(["1","1","2","1","1","3","1","2","0","1","1","1","0","2","2","0","0","0","1","1","1","2","0","1","0","0","0","3","4","0","0","0","0","0","1"],"D4"),(["1","1","2","0","0","0","1","2","1","0","1","1","0","2","2","0","0","0","1","0","2","2","0","0","0","0","0","3","4","0","0","0","0","0","1"],"D4"),(["1","1","2","1","1","2","3","1","1","1","1","1","0","2","2","0","0","0","1","0","2","2","0","1","0","0","0","3","4","0","0","0","0","0","1"],"D4"),(["2","1","1","0","0","3","1","2","0","2","1","1","0","2","2","0","0","0","1","0","1","2","0","0","0","0","0","3","4","0","0","0","0","0","1"],"D4"),(["0","1","1","1","1","2","1","2","1","0","1","1","0","2","2","0","0","0","1","1","2","2","0","1","0","0","0","3","4","0","0","0","0","0","1"],"D4"),(["0","1","2","1","0","3","1","1","0","2","1","1","0","2","2","0","0","0","1","0","1","2","0","0","0","0","0","3","4","0","0","0","0","0","1"],"D4")]

id3 :: (Ord x, Ord y) => [([x],y)] -> (DT.DecisionTree x y)
id3 dataset =
    let unusedAttributes = [0 .. ((length $ fst $ head dataset) - 1)]
    in id3' dataset unusedAttributes

test_information_gain_normal = do
    assertEqual 1.121928 $ helper [[0],[1],[2],[0],[1]] [1,2,4,4,3]
    where helper xs ys = ID3.round (6::Int) . information_gain 0 $ zip xs ys

information_gain :: (Ord x, Ord y) => Int -> [([x],y)] -> Double
information_gain attributeIndex dataset =
    let partitioned = List.groupBy ((==) `on` selector) $ List.sortBy (compare `on` selector) dataset
        tallies = map iLength partitioned
        fracts = map (/ (iLength dataset)) tallies
    in (entropy dataset) - sum (List.zipWith (*) fracts (map entropy partitioned))
    where selector = (!! attributeIndex) . fst

test_entropy_empty_set = assertEqual 0.0 $ entropy ([]::[([Int],Int)])
test_entropy_normal = do
    assertEqual 0.0      $ helper [1,1,1,1,1,1,1]
    assertEqual 1.0      $ helper [1,1,2,2]
    assertEqual 1.584963 $ helper [1,1,2,2,3,3]
    assertEqual 1.905639 $ helper [1,2,4,4,3,2,2,1]
    where helper = ID3.round 6 . entropy . zip (repeat [0])

entropy :: Ord label => [([attribute],label)] -> Double
entropy [] = 0.0
entropy set =
    let groupedData = List.group $ List.sort $ map snd set
        tallies = map iLength $ groupedData
        fracts = map (/ (iLength set)) tallies
    in foldl (\a x -> a + (-x) * logBase 2 x) 0 fracts
